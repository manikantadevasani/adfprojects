{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_mystoragelake01",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_storage03",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_mystoragelake01",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          eid as integer,",
				"          eno as integer,",
				"          ename as string,",
				"          esal as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          eid as integer,",
				"          eno as integer,",
				"          ename as string,",
				"          esal as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 derive(dummy = 'dummy',",
				"          eid = eid,",
				"          eno = eno,",
				"          ename = ename,",
				"          esal = esal) ~> derivedColumn1",
				"aggregate1, source2 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 keyGenerate(output(key1 as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"derivedColumn1 aggregate(groupBy(dummy),",
				"     maxid = max(eid)) ~> aggregate1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['key.txt'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}